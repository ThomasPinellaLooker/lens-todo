* React/Lens TODO app

[[../images/app.png]]

* Todo 1: Setting up skeleton project

** Install Yarn
[[https://yarnpkg.com/en/][Yarn]] must be installed.  If yo don't have yarn installed , have a look at [[https://yarnpkg.com/en/docs/install][here]] and choose the appropriate installation for your environment.

** Configure gradle.properties file
Lens needs to connect to Looker's private npm registry, powered by Nexus. Lens has some scripts that take care of this setup automatically,
but they assume that some setup from Helltool has already been completed, specifically configuration of a gradle.properties file.

If you have Helltool installed and running, you've likely already setup your gradle.properties file to connect to our Nexus server.
[[https://github.com/looker/helltool#dependencies][If not take a look at the relevant Helltool directions and follow them so you can get the Nexus server username and password first]].


** Clone this Repository and setup
#+BEGIN_SRC bash
git clone git@github.com:ssirowy/lens-todo.git
yarn npmrc
yarn
yarn start
#+END_SRC

[[http://localhost:3000/][Open this and you should see a basic app.]]

If all goes well you should see something that looks like this:

[[../images/first.png]]

* Todo 2: Get your bearings and have a look around
I used a very helpful tool called [[https://github.com/facebook/create-react-app][Create React app]] to set up the basic React app skeleton for me and I chose to use Typescript.  The tool
sets up a simple directory structure all of our code will go under the `src` directory.  Have a look in there.  I have provided some sample code
you can start looking at and modifying.

*** Main source files
**** src/index.tsx
   This was generated for me and instantiates our app.
**** src/LensTodo.tsx
   This file was initially generated and I have changed to illustrate some really basic usage of how to render a component and basic Lens component usage.
**** src/LensTodo.css
   I tried to keep my CSS usage down to a mininum to see what Lens provides out of the box, but in cerain cases I needed a little more flexibility.
   Try and make use of Lens default stylings as much as you can as you build.
**** src/utils/todo_utils.ts
   I have provided a number of todo utilities you might find useful, including helpful interfaces of a Todo item, an interface for our app state, and a
   a variety of other items.


*** React apps
There are much [[https://reactjs.org/][better treatments]] of what React is and how to build, render, and compose components together, but here some basics.

React is a small library that makes it easy to build UI components. For those familiar with the MVC architecture,
React acts as the (V)iew layer. React provides a few simple approaches for defining how your component
should be rendered.  One way is to create a Javscript class, like so:

#+BEGIN_SRC javascript

class MyComponent extends React.Component {
  render() {
    return (
       <h1>My first React component</h1>
    )
  }
}

#+END_SRC

(There)

Components can accept inputs from the outside world, called _props_ . They can also maintain their own internal _state_.  Components are typically
built to have simple, well defined interfaces, and be inherently composable within an app hierarchy.

You will see in the LensTodo.tsx that the app is itself a component that is composed of several Lens components.

*** Challenges
- [ ] Look at the Lens docs and instantiate a few more components inside the Card. Try different inputs to see what they do.
- [ ] The LensTodo app is wrapped inside a `ThemeProvider` component which has a reference to a theme. 
      The theme itself has several defined palettes.  Try and change the background of the page by applying a `bg` prop to the top most `Flex` component in the component.

* Todo 3: List todos
Fill me in

* Todo 4: Create new todos
Fill me in

* Todo 5: Complete todos
Fill me in

* Todo 6: Filter todos
Fill me in

* Todo 7: State management?
Fill me in
